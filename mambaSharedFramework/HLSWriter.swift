//
//  HLSWriter.swift
//  mamba
//
//  Created by David Coufal on 7/12/16.
//  Copyright Â© 2016 Comcast Corporation.
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Foundation

/// Class responsible for writing in memory HLS manifests to concrete manifests suitable for streaming or other parsers
public class HLSWriter {
    
    /**
     Constructs a writer for HLS manifests.
     
     - parameter identityString: This optional string will be used as a HLS 'comment' to easily
     identify manifests parsed and written by this system.
     
     - parameter suppressMambaIdentityString: If set to true, the writer will not add a comment
     identifying that mamba generated the HLS manifest. If set to false (or not set at all) the
     write will output a comment (this is seperate from the identityString above)
     */
    public init(identityString: String? = nil,
                suppressMambaIdentityString: Bool = false) {
        self.identityString = identityString
        self.suppressMambaIdentityString = suppressMambaIdentityString
    }
    
    /// Writes a `HLSManifest` object to a stream. Caller is assumed to be responsible for opening and closing this stream.
    public func write(hlsManifest: HLSManifestInterface, toStream stream: OutputStream) throws {
        
        // write initial #EXTM3U
        try write(string: PantosTag.EXTM3U.toString(), toStream: stream)
        
        // write HLS comments to identify ourselves
        if let identityString = identityString {
            try write(string: identityString, toStream: stream)
        }
        if !suppressMambaIdentityString {
            try write(string: " Generated by Mamba(\(Mamba.version)) Copyright (c) 2017 Comcast Corporation", toStream: stream)
        }
        
        // write tags
        for tag in hlsManifest.tags {
            if tag.isDirty {
                guard let writer = hlsManifest.registeredTags.writer(forTag: tag.tagDescriptor) else {
                    throw HLSWriterError.invalidManifest(description: "Cannot write dirty tag with unknown descriptor: \(tag.tagDescriptor.toString())")
                }
                try writer.write(tag: tag, toStream: stream)
            }
            else {
                try GenericTagWriter.write(tag: tag, toStream: stream)
            }
            try stream.write(unicodeScalar: HLSTagWritingSeparators.newline)
        }
    }
    
    private func write(string: String, toStream stream: OutputStream) throws {
        
        try stream.write(unicodeScalar: HLSTagWritingSeparators.hash)
        try stream.write(string: string)
        try stream.write(unicodeScalar: HLSTagWritingSeparators.newline)
    }
    
    private let identityString: String?
    private let suppressMambaIdentityString: Bool
}

/// Possible HLSWriter error conditions
public enum HLSWriterError: Error {
    case invalidManifest(description: String?)
}

